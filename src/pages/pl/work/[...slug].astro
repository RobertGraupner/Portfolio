---
import { type CollectionEntry, getCollection } from "astro:content";
import { getLangFromUrl, useTranslations } from "../../../i18n/utils";
import BaseLayout from "../../../layouts/BaseLayout.astro";
import ContactCTA from "../../../components/ContactCTA.astro";
import Hero from "../../../components/Hero.astro";
import Icon from "../../../components/Icon.astro";
import Pill from "../../../components/Pill.astro";

// Define interface for project data
interface ProjectData {
  title: string;
  description: string;
  publishDate: Date;
  tags: string[];
  img: string;
  img_alt?: string;
}

// Enable server-side rendering
export const prerender = false;

// Get language and translation function
const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

// Get slug from URL parameters
const { slug } = Astro.params;
let Content = null;

// Create default object matching the interface
const defaultData: ProjectData = {
  title: "Projekt nie znaleziony",
  description: "",
  publishDate: new Date(),
  tags: ["brak"],
  img: "",
};

let projectData: ProjectData = defaultData;
let entry = null;

try {
  // Get collection and find project with given slug
  const work = await getCollection("work-pl");
  entry = work.find((entry) => entry.id === slug);

  if (entry) {
    const entryModule = await import(`../../../content/work-pl/${entry.id}.md`);
    Content = entryModule.Content;
    projectData = entry.data;
  } else {
    console.error(`Nie znaleziono projektu PL o slug: ${slug}`);
  }
} catch (error) {
  console.error(`Błąd podczas pobierania projektu PL ${slug}:`, error);
}
---

<BaseLayout
  title={projectData.title}
  description={projectData.description || ""}
>
  <div class="stack gap-20">
    <div class="stack gap-15">
      <header>
        <div class="wrapper stack gap-2">
          <a class="back-link" href="/pl/work/"
            ><Icon icon="arrow-left" /> Projekty</a
          >
          <Hero title={projectData.title} align="start">
            <div class="details">
              <div class="tags">
                {
                  projectData.tags &&
                    projectData.tags.map((t) => <Pill>{t}</Pill>)
                }
              </div>
              <p class="description">{projectData.description || ""}</p>
            </div>
          </Hero>
        </div>
      </header>
      <main class="wrapper">
        <div class="stack gap-10 content">
          {
            projectData.img && (
              <img src={projectData.img} alt={projectData.img_alt || ""} />
            )
          }
          <div class="content">
            {
              Content ? (
                <Content />
              ) : (
                <p>Nie można załadować treści projektu {entry?.id || ""}.</p>
              )
            }
          </div>
        </div>
      </main>
    </div>
    <ContactCTA />
  </div>
</BaseLayout>

<style>
  header {
    padding-bottom: 2.5rem;
    border-bottom: 1px solid var(--gray-800);
  }

  .back-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--gray-300);
    text-decoration: none;
    margin-bottom: 1rem;
  }

  .details {
    display: flex;
    flex-direction: column;
    padding: 0.5rem;
    padding-left: 0;
    gap: 1.5rem;
    justify-content: space-between;
    align-items: center;
  }

  .tags {
    display: none;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .description {
    font-size: var(--text-lg);
    max-width: 54ch;
  }

  .content {
    max-width: 85ch;
    margin-inline: auto;
  }

  .content > :global(* + *) {
    margin-top: 1rem;
  }

  .content :global(h1),
  .content :global(h2),
  .content :global(h3),
  .content :global(h4),
  .content :global(h5) {
    margin: 1.5rem 0;
  }

  .content :global(img) {
    border-radius: 1.5rem;
    box-shadow: var(--shadow-sm);
    background: var(--gradient-subtle);
    border: 1px solid var(--gray-800);
  }

  .content :global(blockquote) {
    font-size: var(--text-lg);
    font-family: var(--font-brand);
    font-weight: 600;
    line-height: 1.1;
    padding-inline-start: 1.5rem;
    border-inline-start: 0.25rem solid var(--accent-dark);
    color: var(--gray-0);
  }

  .back-link,
  .content :global(a) {
    text-decoration: 1px solid underline transparent;
    text-underline-offset: 0.25em;
    transition: text-decoration-color var(--theme-transition);
  }

  .back-link:hover,
  .back-link:focus,
  .content :global(a:hover),
  .content :global(a:focus) {
    text-decoration-color: currentColor;
  }

  @media (min-width: 50em) {
    .back-link {
      align-self: flex-start;
    }

    .details {
      flex-direction: row;
      gap: 2.5rem;
    }

    .tags {
      display: flex;
    }

    .content :global(blockquote) {
      font-size: var(--text-2xl);
    }
  }
</style>
