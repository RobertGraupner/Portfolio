---
interface Props {
  name: string;
  logo: string;
  color?: string;
  size?: string;
}

const { name, logo, color = "currentColor", size = "2em" } = Astro.props;

// Get SVG content
const response = await fetch(new URL(logo, Astro.url));
let svgContent = await response.text();

// Replace all possible color attributes
svgContent = svgContent
  .replace(/fill="[^"]*"/g, `fill="${color}"`)
  .replace(/stroke="[^"]*"/g, `stroke="${color}"`)
  // Add style directly to SVG
  .replace("<svg", `<svg style="color: ${color};"`)
  // Remove constant colors from path
  .replace(/fill="#[^"]*"/g, `fill="${color}"`)
  .replace(/stroke="#[^"]*"/g, `stroke="${color}"`)
  // Replace currentColor with selected color
  .replace(/fill="currentColor"/g, `fill="${color}"`)
  .replace(/stroke="currentColor"/g, `stroke="${color}"`);
---

<div class="tech-icon" style={`--icon-size: ${size}`} set:html={svgContent} />

<style>
  .tech-icon {
    display: inline-flex;
    align-items: center;
    justify-content: center;
  }

  .tech-icon :global(svg) {
    width: var(--icon-size, 2em);
    height: var(--icon-size, 2em);
  }

  .tech-icon :global(svg *) {
    fill: inherit;
    stroke: inherit;
  }
</style>
